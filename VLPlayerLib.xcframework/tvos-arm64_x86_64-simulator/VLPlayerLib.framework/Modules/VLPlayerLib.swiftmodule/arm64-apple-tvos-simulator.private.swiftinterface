// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-tvos12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VLPlayerLib
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import AdSupport
import CommonCrypto
import CoreMedia
import Foundation
import GoogleInteractiveMediaAds
import MediaPlayer
import ObjectiveC
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public class Subtitles {
  public init(file filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8)
  public init(subtitles string: Swift.String)
  public func searchSubtitles(at time: Foundation.TimeInterval) -> Swift.String?
  @objc deinit
}
extension AVFoundation.AVPlayer {
  public var subtitleLabel: UIKit.UILabel? {
    get
    set(value)
  }
  public func addSubtitles(parentView: UIKit.UIView, textColor: Swift.String?, isFullScreen: Swift.Bool) -> Self
  public func getSubTitleInstance() -> Self
  public func updateSubtitlesFont()
  public func updateSubTitleConstraints(parentView: UIKit.UIView, isFullScreen: Swift.Bool)
  public func open(file filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8, isPathLocal: Swift.Bool)
  public func show(subtitles string: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class VLError : ObjectiveC.NSObject {
  open var isSuccess: Swift.Bool?
  open var isPlayable: Swift.Bool?
  open var errorCode: Swift.String?
  open var errorMessage: Swift.String?
  open var vl_errorCode: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol videoPlaybackDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func videoStarted(timestamp: Swift.Double, playerTag: Swift.String)
  @objc optional func videoFinished(playerTag: Swift.String)
  @objc optional func videoPause(timestamp: Swift.Double, playerTag: Swift.String)
  @objc optional func videoResume(timestamp: Swift.Double, playerTag: Swift.String)
  @objc optional func videoPlayerUpdateByProgressInterveral(currentTime: Swift.Double, totalTime: Swift.Double, playerTag: Swift.String)
  @objc optional func videoPlayerProgressByEverySecond(currentTime: Swift.Double, totalTime: Swift.Double, playerTag: Swift.String)
  @objc optional func videoPlaybackError(currentTime: Swift.Double, errorMessage: Swift.String, errorCode: Swift.String, playerTag: Swift.String)
  @objc optional func adStarted(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adResumed(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adStopped(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adPaused(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adFinished(currentTime: Swift.Double, adTag: Swift.String?, playerTag: Swift.String)
  @objc optional func adError(currentTime: Swift.Double, adTag: Swift.String?, errorMessage: Swift.String?, playerTag: Swift.String)
  @objc optional func onFullScreenChange(currentTime: Swift.Double, isFullScreen: Swift.Bool, playerTag: Swift.String)
  @objc optional func onBackButtonTapped()
  @objc optional func onSeek(currentTime: Swift.Double, playerTag: Swift.String)
  @objc optional func onBuffer(currentTime: Swift.Double, playerTag: Swift.String)
  @objc optional func videoFetchError(error: VLPlayerLib.VLError?, playerTag: Swift.String?, contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?)
  @objc optional func pictureInPictureSetupCompleted(isPIPSelected: Swift.Bool)
  @objc optional func pictureInPictureWillStart()
  @objc optional func pictureInPictureDidStart()
  @objc optional func pictureInPictureRestoreFullPlayer()
  @objc optional func pictureInPictureWillStop()
  @objc optional func pictureInPictureDidStop()
  @objc optional func pictureInPictureDidFailedToStart(error: VLPlayerLib.VLError, playerTag: Swift.String)
  @objc optional func onLoadingChanged(isLoading: Swift.Bool)
  @objc optional func isSubtitlesEmbeddedInUrlChanged(isEmbedded: Swift.Bool)
  @objc optional func playerBitrateDebugLogs(logString: Swift.String)
  @objc optional func autoPlayUIInitiated()
  @objc optional func autoPlayUIDimissed(isPlayingNextContent: Swift.Bool)
}
public protocol ClientSideAdTrackingDelegate : AnyObject {
  func additionalTrackingDetailsForClientSideAdTracking() -> [Swift.String : Any]?
  func clientSideAdTrackingEvents(trackingEventType: VLPlayerLib.VLPlayer.AdsEventType, eventTrackingProperties: [Swift.String : Any])
  func initalisationForExternalAdTrackingSdk(playerView: UIKit.UIView, playerSize: CoreFoundation.CGSize, completion: (() -> Swift.Void))
}
extension VLPlayerLib.VLPlayer {
  @objc dynamic open func play()
  @objc dynamic open func pause()
  @objc dynamic open func dispose()
  @objc dynamic open func destroy()
  @objc dynamic open func deinitialisePlayer()
  @objc dynamic open func setPlayerFitToFullScreen()
  @objc dynamic open func setPlayerFitToSmallScreen(frame: CoreFoundation.CGRect)
  @objc dynamic open func goFullScreen()
  @objc dynamic open func removeFullScreen()
  @objc dynamic open func seekTo(seconds: Swift.Double)
  @objc dynamic open func seekToLivePosition()
  @objc dynamic open func seekDVRToLivePosition()
  @objc dynamic open func startTime(seconds: Swift.Double)
  public func getCurrentTime() -> Swift.Double?
  @objc dynamic open func getSource() -> Swift.Dictionary<Swift.String, Swift.String>?
  @objc dynamic open func setIconColor(color: Swift.String)
  @objc dynamic open func setTextColor(color: Swift.String)
  @objc dynamic open func setProgressBarBGColor(color: Swift.String)
  @objc dynamic open func setProgressBarColor(color: Swift.String)
  @objc dynamic open func shouldAutoplay(autoplay: Swift.Bool)
  @objc dynamic open func checkFullscreenState() -> Swift.Bool
  @objc dynamic open func getVideoPlayerView() -> UIKit.UIView?
  @objc dynamic open func setNextVideo(videoId: Swift.String, adTag: Swift.String?)
  @objc dynamic open func playNextVideo(videoId: Swift.String?, vlToken: Swift.String?, adTag: Swift.String?, isSuccess: @escaping ((_ isSuccess: Swift.Bool) -> Swift.Void))
  public func isAutoPlay() -> Swift.Bool?
  @objc dynamic open func shouldPlayMuted(isMuted: Swift.Bool)
  public func isMuted() -> Swift.Bool?
  public func getState() -> VLPlayerLib.VLPlayer.VLPlayerState
  @objc dynamic open func getPlayerVersion() -> Swift.String?
  public func getCurrentVideoTimeLeft() -> Swift.Double?
  public func getCurrentVideoDuration() -> Swift.Double?
  @objc dynamic open func updateVideoPlayerFrame(frame: CoreFoundation.CGRect)
  public func getStartOverTime() -> Swift.Double?
  public func isDVREnabled() -> Swift.Bool?
  public func getAllVideoPlaybackQualityList() -> [Swift.String]?
  public func getCurrentPlaybackQuality() -> Swift.String?
  public func setPlaybackQuality(playbackQuality: Swift.String)
  public func getAllClosedCaptionList() -> [Swift.String]?
  public func getAllContentAudioLanguageList() -> [Swift.String]?
  public func setPlaybackRate(playbackSpeed: Swift.Float)
  public func getPlaybackRate() -> Swift.Float
  public func getCurrentAudioSelected() -> Swift.Int
  public func setAudioSelected(selectedAudio: Swift.String)
  public func setClosedCaption(selectedKey: Swift.String, selectedIndex: Swift.Int)
}
@objc @_inheritsConvenienceInitializers open class VLPlayer : ObjectiveC.NSObject {
  @objc weak open var videoPlayerDelegate: VLPlayerLib.videoPlaybackDelegate?
  weak open var clientSideAdTrackingDelegate: VLPlayerLib.ClientSideAdTrackingDelegate? {
    get
    set
  }
  public var debugLogs: Swift.Bool? {
    get
    set
  }
  open var enablePlayerBitrateLogs: Swift.Bool?
  @objc override dynamic public init()
  open func setSource(vlToken: Swift.String, vlAPIEndPoint: Swift.String? = nil, videoID: Swift.String, vlPlayerTag: Swift.String, customControlsView: UIKit.UIView?, adUrl: Swift.String?, playerProgressInterval: Swift.Int? = nil, playerFeaturesSupported: VLPlayerLib.VLPlayer.VLPlayerFeatureSupported!, nextVideoList: [Swift.String] = [], isSuccess: @escaping ((_ isSuccess: Swift.Bool, _ playerView: UIKit.UIView?, _ contentResponse: Swift.Dictionary<Swift.String, Swift.AnyObject>?) -> Swift.Void))
  @objc deinit
}
extension VLPlayerLib.VLPlayer {
  public struct VLPlayerFeatureSupported {
    public init(fullScreenOnly: Swift.Bool, isCustomLoaderAdded: Swift.Bool = false, shouldStartPictureInPictureInline: Swift.Bool = false, autoPlayEnabled: Swift.Bool = true, loopVideoPlayback: Swift.Bool = false, hideVideoControls: Swift.Bool = false, mutePlayback: Swift.Bool = false, customPlayerControlsColor: VLPlayerLib.PlayerControlsColor?, clientSideAdTrackingDetails: VLPlayerLib.VLPlayer.VLClientSideAdTrackingDetails? = nil, showPlayerControlAlways: Swift.Bool = false, supportsChromeCast: Swift.Bool = false, chromecastCustomReceiver: Swift.String?, playerResponseRequired: Swift.Bool = false, preGameStartTime: Swift.Double?)
  }
  public struct VLClientSideAdTrackingDetails {
    public init(isClientSideAdTrackingEnabled: Swift.Bool, isWTAEnabled: Swift.Bool)
  }
}
extension VLPlayerLib.VLPlayer {
  public enum VideoPlayerGravity : Swift.String {
    case resizeAspect
    case resizeAspectFill
    case resize
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum VLPlayerState : Swift.String {
    case paused
    case playing
    case playingAndCasting
    case buffering
    case complete
    case error
    case advertisement
    case stalled
    case stopped
    case none
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum AdsEventType : Swift.String {
    case impression
    case start
    case firstQuartile
    case midPoint
    case thirdQuartile
    case complete
    case mute
    case exitFullscreen
    case fullscreen
    case unmute
    case resume
    case closeLinear
    case error
    case pause
    case acceptInvitationLinear
    case rewind
    case creativeView
    case stop
    case clickThrough
    case clickTracking
    case none
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct PlayerControlsColor {
  public init(iconColor: Swift.String? = nil, textColor: Swift.String? = nil, progressBarBGColor: Swift.String? = nil, progressBarColor: Swift.String? = nil)
}
extension VLPlayerLib.VLPlayer.VideoPlayerGravity : Swift.Equatable {}
extension VLPlayerLib.VLPlayer.VideoPlayerGravity : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.VideoPlayerGravity : Swift.RawRepresentable {}
extension VLPlayerLib.VLPlayer.VLPlayerState : Swift.Equatable {}
extension VLPlayerLib.VLPlayer.VLPlayerState : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.VLPlayerState : Swift.RawRepresentable {}
extension VLPlayerLib.VLPlayer.AdsEventType : Swift.Equatable {}
extension VLPlayerLib.VLPlayer.AdsEventType : Swift.Hashable {}
extension VLPlayerLib.VLPlayer.AdsEventType : Swift.RawRepresentable {}
